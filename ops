{"version":1,"ops":[{"type":3,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553168168,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTE5NjMxMw==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475196313"},"message":"```\n       expected: ExitFailure 139\n        but got: ExitFailure 11\n```\n\nI've observed this before as well.\n\nWhen we run it in the shell, we get exit code 139 (tried bash and zsh).\n\nWhen running under `strace`, we get exit code 139.\n\nBut when running under `hatrace`, we get 11.\n\nRelevant code is perhaps:\n\n```haskell\n      (newState, event) \u003c- case status of\n        -- `Exited` means that the process chose to exit by itself,\n        -- as in calling `exit()` (as opposed to e.g. getting killed\n        -- by a signal).\n        Exited i -\u003e do\n          case i of\n            0 -\u003e pure (state, Death $ ExitSuccess)\n            _ -\u003e pure (state, Death $ ExitFailure i)\n        Continued -\u003e error $ \"waitForTraceEvent: BUG: Continued status appeared even though WCONTINUE was not passed to waitpid\"\n        -- Note that `Signaled` means that the process was *terminated*\n        -- by a signal.\n        -- Signals that come in without killing the process appear in\n        -- the `Stopped` case.\n        Signaled _sig -\u003e pure (state, Death $ ExitFailure (fromIntegral fullStatus))\n```\n\nShould check which of the two `Death` constructors is happening here.","files":null},{"type":3,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553168539,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTE5NzgzNA==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475197834"},"message":"For the third one, absence of `clone()` it may be an optimisation in newer bash.\n\nOn Ubuntu 16.04, in `GNU bash, version 4.3.48(1)-release (x86_64-pc-linux-gnu)`, I get with `strace`:\n\n```\n% strace -fye clone,execve bash -c 'true \u0026\u0026 example-programs-build/hello-linux-x86_64'\nexecve(\"/bin/bash\", [\"bash\", \"-c\", \"true \u0026\u0026 example-programs-build/h\"...], [/* 47 vars */]) = 0\nclone(strace: Process 11440 attached\nchild_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f43759f39d0) = 11440\n[pid 11440] execve(\"example-programs-build/hello-linux-x86_64\", [\"example-programs-build/hello-lin\"...], [/* 46 vars */]) = 0\nHello, world!\n[pid 11440] +++ exited with 0 +++\n--- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=11440, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---\n+++ exited with 0 +++\n```\n\n---\n\nWhile @qrilka gets:\n\nOn Gentoo, `GNU bash, version 4.4.23(1)-release (x86_64-unknown-linux-gnu)`:\n\n```\n$ strace -fye clone,execve bash -c 'true \u0026\u0026 example-programs-build/hello-linux-x86_64'\nexecve(\"/home/qrilka/.nix-profile/bin/bash\", [\"bash\", \"-c\", \"true \u0026\u0026 example-programs-build/h\"...], 0x7ffe60983030 /* 63 vars */) = 0\nexecve(\"example-programs-build/hello-linux-x86_64\", [\"example-programs-build/hello-lin\"...], 0x720008 /* 63 vars */) = 0\nHello, world!\n+++ exited with 0 +++\n```","files":null},{"type":3,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553168688,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTE5ODQ5MA==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475198490"},"message":"When trying with Bash 4.4.23 via nix on my Ubuntu, I also don't have the `clone()`:\n\n```\n% strace -fye clone,execve /nix/store/czx8vkrb9jdgjyz8qfksh10vrnqa723l-bash-4.4-p23/bin/bash -c 'true \u0026\u0026 example-programs-build/hello-linux-x86_64'\nexecve(\"/nix/store/czx8vkrb9jdgjyz8qfksh10vrnqa723l-bash-4.4-p23/bin/bash\", [\"/nix/store/czx8vkrb9jdgjyz8qfksh\"..., \"-c\", \"true \u0026\u0026 example-programs-build/h\"...], [/* 47 vars */]) = 0\nexecve(\"example-programs-build/hello-linux-x86_64\", [\"example-programs-build/hello-lin\"...], [/* 47 vars */]) = 0\nHello, world!\n+++ exited with 0 +++\n```\n\nSo that really looks like an optimisation, and the `true \u0026\u0026` I put into that test to trick bash into actually making a `clone` syscall doesn't work any more in newer bash.","files":null},{"type":3,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553168890,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTE5OTM1NQ==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475199355"},"message":"OK, we found the solution to this one: `true \u0026\u0026 example-programs-build/hello-linux-x86_64` should be `example-programs-build/hello-linux-x86_64 \u0026\u0026 true` to force bash to `clone()`. I'll fix it.","files":null},{"type":3,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553169883,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTIwMzYwNg==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475203606"},"message":"For the second one, regarding the extraneous `Syscall_rt_sigprocmask`, we found that reverting commit 874b29c804bcb32300e0dc50dc18e93d8db64ada (`fork_exec_with_ptrace: Use raise() instead of kill()`) gets rid of it.\n\nFrom `man 3 raise`:\n\n```\nSYNOPSIS\n       #include \u003csignal.h\u003e\n\n       int raise(int sig);\n\nDESCRIPTION\n       The  raise()  function sends a signal to the calling process or thread.  In a sin‚Äê\n       gle-threaded program it is equivalent to\n\n           kill(getpid(), sig);\n\n       In a multithreaded program it is equivalent to\n\n           pthread_kill(pthread_self(), sig);\n\n       If the signal causes a handler to be called, raise() will return  only  after  the\n       signal handler has returned.\n```\n\nThis indicates that due to glibc differences between us, @qrilka's glibc does more (an extra `rt_sigprocmask()`) in `raise()`.\n\nMy glibc version:\n\n```\n% ldd --version\nldd (Ubuntu GLIBC 2.23-0ubuntu11) 2.23\n```\n\n@qrilka's glibc version:\n\n```\n$ ldd --version\nldd (Gentoo 2.27-r6 p3) 2.27\n```","files":null},{"type":3,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553170088,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTIwNDQ1Mg==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475204452"},"message":"Reverting the commit is the correct solution, as the extra handling for multi-threaded programs isn't necessary: We are just after `fork()` so there cannot be any other threads.","files":null},{"type":3,"author":{"id":"f5da7935a482ca65bf34e264f28644c14355887f"},"timestamp":1553194617,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTM2MDY0NQ==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475360645"},"message":"Ending with https://github.com/nh2/hatrace/commit/b968ad15e88340bd7b300212cdf339515b70d54a all of this seem to get resolved","files":null},{"type":3,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553199843,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NTM4ODI5Ng==","github-url":"https://github.com/nh2/hatrace/issues/4#issuecomment-475388296"},"message":"Yep, that should be the case.\n\nCommits 877fae78 and 8cd9ec57 fix the exit code `11` vs `139` issue, though I still do not really understand what's going on (comment added).\n\nThe two commits above fix the other issues.","files":null},{"type":4,"author":{"id":"17b5287f4c1b3f5e697941f4874a9c42bc73cf6e"},"timestamp":1553199843,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjIyMDk0MTYwOA=="},"status":2}]}